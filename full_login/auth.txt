const bcrypt = require("bcrypt");
const User = require('../models/user');
const jwt = require("jsonwebtoken");

const JWT_SECRET = "figfifsfiiuoefueuiruw4y387";

const test = (req, res) => {
    res.json("fine");
};

async function hash(password) {
    return await bcrypt.hash(password, 10);
}

async function comparePassword(password, hashed) {
    return await bcrypt.compare(password, hashed);
}

// for registering
const registerUser = async (req, res) => {
    try {
        const { name, email, password } = req.body;
        if (!name) {
            return res.json({
                error: "Name is required"
            });
        }
        if (!password || password.length < 6) {
            return res.json({
                error: "Password is required and should be at least 6 characters"
            });
        }
        const exist = await User.findOne({ email }); // check if email is already given
        if (exist) {
            res.json({
                error: "Email already in use"
            });
        }
        const hashed = await hash(password);
        const user = await User.create({
            name, email, password: hashed
        });
        res.json(user);
    } catch (error) {
        console.log("****error", error);
    }
};

// for logging
const loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) {
            res.json({
                error: "No user found"
            });
        }
        const match = await comparePassword(password, user.password);
        if (match) {
            jwt.sign({ email: user.email, id: user._id, name: user.name }, JWT_SECRET, {}, (err, token) => {
                if (err) throw (err);
                res.cookie("token", token).json(user);
            });
        }
        if (!match) {
            res.json({ error: "Password don't match" });
        }
    } catch (error) {
        console.log(error);
    }
};

// for updating user
const updateUser = async (req, res) => {
    try {
        const userId = req.params.id; // assuming you are passing the user ID in the URL parameters
        const { name, email, password } = req.body;

        if (!name && !email && !password) {
            return res.json({
                error: "At least one field (name, email, or password) is required for update."
            });
        }

        const user = await User.findById(userId);

        if (!user) {
            return res.json({
                error: "User not found"
            });
        }

        if (name) user.name = name;
        if (email) user.email = email;
        if (password) user.password = await hash(password);

        const updatedUser = await user.save();
        res.json(updatedUser);
    } catch (error) {
        console.log("****error", error);
        res.status(500).json({
            error: "Internal Server Error"
        });
    }
};

// for deleting user
const deleteUser = async (req, res) => {
    try {
        const userId = req.params.id; // assuming you are passing the user ID in the URL parameters
        const user = await User.findById(userId);

        if (!user) {
            return res.json({
                error: "User not found"
            });
        }

        await user.remove();
        res.json({
            message: "User deleted successfully"
        });
    } catch (error) {
        console.log("****error", error);
        res.status(500).json({
            error: "Internal Server Error"
        });
    }
};

module.exports = {
    test,
    registerUser,
    loginUser,
    updateUser,
    deleteUser
};






import React from 'react'
import { useForm } from 'react-hook-form';
import './App.css';
import {  useState } from 'react';
import * as yup from "yup";
import {yupResolver} from "@hookform/resolvers/yup";
import instance from './baseURL';
import { useNavigate } from 'react-router-dom';


const schema=yup.object().shape({
    Name:yup.string().required("This field cannot be empty") 
  })

function Update() {
    const navigate=useNavigate()
    const {register,handleSubmit,reset,formState: {errors}}=useForm({
        resolver:yupResolver(schema)
         })      
         return (
           <div className="App">
             <form className="formdata" onSubmit={handleSubmit(async (data)=>{
               const id=localStorage.getItem('id')
               const token=localStorage.getItem('token')

               const body={
                 Name:data.Name,
                 id:id,
                 token:token

               }
               console.log(body);     
               const registerresponse= await instance.post('/update',body); 
              alert(registerresponse.data.message);
             })}  >
               <div className="formback">
                 <h2 className="heading">Update Form</h2>
                 <label>Enter Your Updated Name</label>
                  <input id='name' type="text" placeholder="Enter your Name" {...register("Name")} ></input> <br></br>
                  <p className="error" >{errors.Name?.message}</p>
                  <button className='buttonsub'  type='submit'>Submit</button>
                         </div>      
             </form>
           </div>

         )
}

export default Update